Test test---ecc-auto-check-and-restart-adds-hook-when-missing backtrace:
  (--ecc-auto-check-and-restart)
  (progn (fset 'add-hook vnew) (fset 'buffer-live-p vnew) (fset 'deriv
  (unwind-protect (progn (fset 'add-hook vnew) (fset 'buffer-live-p vn
  (let* ((vnew #'(lambda (&rest _) t)) (vnew #'(lambda (&rest _) t)) (
  (progn (progn (setq ecc-buffer-current-buffer (current-buffer)) (set
  (unwind-protect (progn (progn (setq ecc-buffer-current-buffer (curre
  (let ((orig-vterm-update-functions vterm-update-functions)) (unwind-
  (let ((orig-active-buffer ecc-buffer-current-buffer)) (defvar vterm-
  #f(lambda () [t] (let ((orig-active-buffer ecc-buffer-current-buffer
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test---ecc-auto-check-and-restart-add
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test---ecc-auto-check-and-restart-adds-hook-when-missing condition:
Test test---ecc-auto-check-and-restart-finds-vterm-buffer-when-needed backtrace:
  (--ecc-auto-check-and-restart)
  (progn (fset 'ecc-buffer-register-as-active vnew) (fset 'ecc-update-
  (unwind-protect (progn (fset 'ecc-buffer-register-as-active vnew) (f
  (let* ((vnew #'(lambda nil (list 'buffer1 'buffer2 mock-buffer))) (v
  (progn (progn (setq ecc-buffer-current-buffer nil) (setq ecc-active-
  (unwind-protect (progn (progn (setq ecc-buffer-current-buffer nil) (
  (let ((orig-active-buffer ecc-buffer-current-buffer) (orig-buffers e
  #f(lambda () [t] (let ((orig-active-buffer ecc-buffer-current-buffer
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test---ecc-auto-check-and-restart-fin
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test---ecc-auto-check-and-restart-finds-vterm-buffer-when-needed condition:
Test test-ecc-auto-check-and-restart-function backtrace:
  (--ecc-auto-check-and-restart)
  (progn (fset '--ecc-state-y/y/n-p vnew) (fset 'ecc-update-mode-line-
  (unwind-protect (progn (fset '--ecc-state-y/y/n-p vnew) (fset 'ecc-u
  (let* ((vnew #'(lambda nil t)) (old (symbol-function '--ecc-state-y/
  (let ((vterm-update-functions 'nil)) (add-hook 'vterm-update-functio
  (progn (progn (setq test-ecc-original-timer ecc-auto-timer) (setq te
  (unwind-protect (progn (progn (setq test-ecc-original-timer ecc-auto
  (let ((test-buffer (generate-new-buffer "*test-claude*"))) (unwind-p
  #f(lambda () [t] (let ((test-buffer (generate-new-buffer "*test-clau
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-check-and-restart-funct
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-check-and-restart-function condition:
Test test-ecc-auto-enable-adds-hook-and-starts-timer backtrace:
  (--ecc-buffer-register-buffer (current-buffer))
  (cond ((derived-mode-p 'vterm-mode) (--ecc-buffer-register-buffer (c
  ecc-auto-enable()
  (progn (fset 'ecc-buffer-registry-cleanup-buffers #'ignore) (fset 'v
  (unwind-protect (progn (fset 'ecc-buffer-registry-cleanup-buffers #'
  (let* ((vnew #'(lambda (&rest _) t)) (vnew #'(lambda (hook function)
  (progn (progn (setq ecc-buffer-current-buffer (current-buffer)) (set
  (unwind-protect (progn (progn (setq ecc-buffer-current-buffer (curre
  (let ((orig-active-buffer ecc-buffer-current-buffer) (orig-timer ecc
  #f(lambda () [t] (let ((orig-active-buffer ecc-buffer-current-buffer
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-enable-adds-hook-and-st
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-enable-adds-hook-and-starts-timer condition:
Test test-ecc-auto-enable-uses-current-buffer-when-no-buffer-exists backtrace:
  (--ecc-buffer-register-buffer (current-buffer))
  (cond ((derived-mode-p 'vterm-mode) (--ecc-buffer-register-buffer (c
  ecc-auto-enable()
  (progn (fset 'ecc-buffer-registry-cleanup-buffers #'ignore) (fset 'b
  (unwind-protect (progn (fset 'ecc-buffer-registry-cleanup-buffers #'
  (let* ((vnew #'(lambda (&rest _) t)) (vnew #'(lambda (&rest _) 'mock
  (progn (progn (setq ecc-buffer-current-buffer nil) (setq ecc-buffers
  (unwind-protect (progn (progn (setq ecc-buffer-current-buffer nil) (
  (let ((orig-active-buffer ecc-buffer-current-buffer) (orig-buffers e
  #f(lambda () [t] (let ((orig-active-buffer ecc-buffer-current-buffer
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-enable-uses-current-buf
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-enable-uses-current-buffer-when-no-buffer-exists condition:
Test test-ecc-auto-mode-enables-auto-accept backtrace:
  (ecc-buffer-registry-cleanup-buffers)
  ecc-auto-enable()
  (progn (ecc-auto-enable) (ecc-auto-notification-on) (setq ecc-auto-a
  (if ecc-auto-mode (progn (ecc-auto-enable) (ecc-auto-notification-on
  (let ((last-message (current-message))) (setq ecc-auto-mode (cond ((
  ecc-auto-mode(1)
  (let ((ecc-auto-mode nil) (ecc-auto-accept nil)) (ecc-auto-mode 1) (
  (progn (setq test-ecc-auto-notifications 'nil) (fset 'ecc-auto-notif
  (unwind-protect (progn (setq test-ecc-auto-notifications 'nil) (fset
  (let ((old-notify-fn (if (fboundp 'ecc-auto-notify-completion) (prog
  #f(lambda () [t] (let ((old-notify-fn (if ... ...)) (old-notify-on-f
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-mode-enables-auto-accep
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-mode-enables-auto-accept condition:
Test test-ecc-auto-mode-sends-notifications backtrace:
  (ecc-buffer-registry-cleanup-buffers)
  ecc-auto-enable()
  (progn (ecc-auto-enable) (ecc-auto-notification-on) (setq ecc-auto-a
  (if ecc-auto-mode (progn (ecc-auto-enable) (ecc-auto-notification-on
  (let ((last-message (current-message))) (setq ecc-auto-mode (cond ((
  ecc-auto-mode(1)
  (let ((ecc-auto-mode nil)) (ecc-auto-mode 1) (let* ((fn-668 #'member
  (progn (setq test-ecc-auto-notifications 'nil) (fset 'ecc-auto-notif
  (unwind-protect (progn (setq test-ecc-auto-notifications 'nil) (fset
  (let ((old-notify-fn (if (fboundp 'ecc-auto-notify-completion) (prog
  #f(lambda () [t] (let ((old-notify-fn (if ... ...)) (old-notify-on-f
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-mode-sends-notification
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-mode-sends-notifications condition:
Test test-ecc-auto-send-notification-functions backtrace:
  signal(ert-test-failed (((should (assoc 'completion test-ecc-auto-no
  ert-fail(((should (assoc 'completion test-ecc-auto-notifications)) :
  (if (unwind-protect (setq value-729 (apply fn-727 args-728)) (setq f
  (let (form-description-731) (if (unwind-protect (setq value-729 (app
  (let ((value-729 'ert-form-evaluation-aborted-730)) (let (form-descr
  (let* ((fn-727 #'assoc) (args-728 (condition-case err (list 'complet
  (progn (fset 'ecc-state-get vnew) (fset '--ecc-state-initial-waiting
  (unwind-protect (progn (fset 'ecc-state-get vnew) (fset '--ecc-state
  (let* ((vnew #'(lambda nil t)) (vnew #'(lambda nil t)) (vnew #'(lamb
  (progn (setq test-ecc-auto-notifications 'nil) (fset 'ecc-auto-notif
  (unwind-protect (progn (setq test-ecc-auto-notifications 'nil) (fset
  (let ((old-notify-fn (if (fboundp 'ecc-auto-notify-completion) (prog
  (progn (progn (setq test-ecc-original-timer ecc-auto-timer) (setq te
  (unwind-protect (progn (progn (setq test-ecc-original-timer ecc-auto
  (let ((test-buffer (generate-new-buffer "*test-claude*"))) (unwind-p
  #f(lambda () [t] (let ((test-buffer (generate-new-buffer "*test-clau
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test ... :result
  ert-run-test(#s(ert-test :name test-ecc-auto-send-notification-funct
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-send-notification-functions condition:
Test test-ecc-auto-toggle-function backtrace:
  (ecc-buffer-registry-cleanup-buffers)
  ecc-auto-enable()
  (progn (ecc-auto-enable) t)
  (if (and ecc-timer (member 'ecc-send-accept vterm-update-functions))
  ecc-auto-toggle()
  apply(ecc-auto-toggle nil)
  (setq value-680 (apply fn-678 args-679))
  (unwind-protect (setq value-680 (apply fn-678 args-679)) (setq form-
  (if (unwind-protect (setq value-680 (apply fn-678 args-679)) (setq f
  (let (form-description-682) (if (unwind-protect (setq value-680 (app
  (let ((value-680 'ert-form-evaluation-aborted-681)) (let (form-descr
  (let* ((fn-678 #'ecc-auto-toggle) (args-679 (condition-case err (lis
  (let ((vterm-update-functions 'nil)) (let* ((fn-678 #'ecc-auto-toggl
  (progn (setq test-ecc-auto-notifications 'nil) (fset 'ecc-auto-notif
  (unwind-protect (progn (setq test-ecc-auto-notifications 'nil) (fset
  (let ((old-notify-fn (if (fboundp 'ecc-auto-notify-completion) (prog
  (progn (progn (setq test-ecc-original-timer ecc-auto-timer) (setq te
  (unwind-protect (progn (progn (setq test-ecc-original-timer ecc-auto
  (let ((test-buffer (generate-new-buffer "*test-claude*"))) (unwind-p
  #f(lambda () [t] (let ((test-buffer (generate-new-buffer "*test-clau
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-auto-toggle-function :docume
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-auto-toggle-function condition:
Test test-ecc-buffer-get-and-set-buffer-state backtrace:
  signal(error (":active is not a valid Claude buffer state. Valid sta
  error("%s is not a valid Claude buffer state. Valid states are: %s" 
  (cond ((not (memq state ecc-state-available-states)) (error "%s is n
  ecc-buffer-set-buffer-state(nil :active)
  apply(ecc-buffer-set-buffer-state (nil :active))
  (setq value-409 (apply fn-407 args-408))
  (unwind-protect (setq value-409 (apply fn-407 args-408)) (setq form-
  (not (unwind-protect (setq value-409 (apply fn-407 args-408)) (setq 
  (if (not (unwind-protect (setq value-409 (apply fn-407 args-408)) (s
  (let (form-description-411) (if (not (unwind-protect (setq value-409
  (let ((value-409 'ert-form-evaluation-aborted-410)) (let (form-descr
  (let* ((fn-407 #'ecc-buffer-set-buffer-state) (args-408 (condition-c
  (progn (setq ecc-buffer-registered-buffers-alist (list (cons test-bu
  (unwind-protect (progn (setq ecc-buffer-registered-buffers-alist (li
  (let ((original-registry ecc-buffer-registered-buffers-alist) (test-
  #f(lambda () [t] (let ((original-registry ecc-buffer-registered-buff
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-buffer-get-and-set-buffer-st
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-buffer-get-and-set-buffer-state condition:
Test test-ecc-buffer-rename-buffer-when-disabled backtrace:
  (ecc-buffer-rename-buffer nil)
  (progn (fset 'rename-buffer vnew) (ecc-buffer-rename-buffer nil) (le
  (unwind-protect (progn (fset 'rename-buffer vnew) (ecc-buffer-rename
  (let* ((vnew #'(lambda (name &optional unique) (progn (setq rename-c
  (progn (save-current-buffer (set-buffer mock-buffer) (set (make-loca
  (unwind-protect (progn (save-current-buffer (set-buffer mock-buffer)
  (let ((orig-buffer ecc-buffer-current-buffer) (mock-buffer (generate
  #f(lambda () [t] (let ((orig-buffer ecc-buffer-current-buffer) (mock
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-buffer-rename-buffer-when-di
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-buffer-rename-buffer-when-disabled condition:
Test test-ecc-buffer-rename-buffer-when-enabled backtrace:
  (ecc-buffer-rename-buffer t)
  (progn (fset 'rename-buffer vnew) (ecc-buffer-rename-buffer t) (let 
  (unwind-protect (progn (fset 'rename-buffer vnew) (ecc-buffer-rename
  (let* ((vnew #'(lambda (name &optional unique) (progn (setq rename-c
  (progn (save-current-buffer (set-buffer mock-buffer) (set (make-loca
  (unwind-protect (progn (save-current-buffer (set-buffer mock-buffer)
  (let ((orig-buffer ecc-buffer-current-buffer) (mock-buffer (generate
  #f(lambda () [t] (let ((orig-buffer ecc-buffer-current-buffer) (mock
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-buffer-rename-buffer-when-en
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-buffer-rename-buffer-when-enabled condition:
Test test-ecc-get-repository-files-with-mock-dir backtrace:
  signal(ert-test-failed (((should (member elisp-file files)) :form (m
  ert-fail(((should (member elisp-file files)) :form (member "/tmp/ecc
  (if (unwind-protect (setq value-824 (apply fn-822 args-823)) (setq f
  (let (form-description-826) (if (unwind-protect (setq value-824 (app
  (let ((value-824 'ert-form-evaluation-aborted-825)) (let (form-descr
  (let* ((fn-822 #'member) (args-823 (condition-case err (list elisp-f
  (let ((files (ecc-get-repository-files temp-dir))) (let* ((fn-822 #'
  (progn (make-directory subdir) (let ((temp-file elisp-file) (temp-bu
  (unwind-protect (progn (make-directory subdir) (let ((temp-file elis
  (let* ((temp-dir (make-temp-file "ecc-test-dir-" t)) (subdir (file-n
  #f(lambda () [t] (let* ((temp-dir (make-temp-file "ecc-test-dir-" t)
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-get-repository-files-with-mo
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-get-repository-files-with-mock-dir condition:
Test test-ecc-history-loadable backtrace:
  signal(wrong-type-argument (stringp nil))
  apply(signal (wrong-type-argument (stringp nil)))
  (setq value-906 (apply fn-904 args-905))
  (unwind-protect (setq value-906 (apply fn-904 args-905)) (setq form-
  (if (unwind-protect (setq value-906 (apply fn-904 args-905)) (setq f
  (let (form-description-908) (if (unwind-protect (setq value-906 (app
  (let ((value-906 'ert-form-evaluation-aborted-907)) (let (form-descr
  (let* ((fn-904 #'file-exists-p) (args-905 (condition-case err (list 
  #f(lambda () [t] (let* ((fn-904 #'file-exists-p) (args-905 (conditio
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-history-loadable :documentat
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-history-loadable condition:
Test test-ecc-large-buffer-chunk-string backtrace:
  signal(ert-test-failed (((should (<= (length (cadr chunks)) chunk-si
  ert-fail(((should (<= (length (cadr chunks)) chunk-size)) :form (<= 
  (if (unwind-protect (setq value-1027 (apply fn-1025 args-1026)) (set
  (let (form-description-1029) (if (unwind-protect (setq value-1027 (a
  (let ((value-1027 'ert-form-evaluation-aborted-1028)) (let (form-des
  (let* ((fn-1025 #'<=) (args-1026 (condition-case err (list (length (
  (let* ((medium-string "This is a medium test string that should be s
  #f(lambda () [t] (require 'ecc-large-buffer) (let* ((small-string "T
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-large-buffer-chunk-string :d
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-large-buffer-chunk-string condition:
Test test-ecc-large-buffer-loadable backtrace:
  signal(wrong-type-argument (stringp nil))
  apply(signal (wrong-type-argument (stringp nil)))
  (setq value-992 (apply fn-990 args-991))
  (unwind-protect (setq value-992 (apply fn-990 args-991)) (setq form-
  (if (unwind-protect (setq value-992 (apply fn-990 args-991)) (setq f
  (let (form-description-994) (if (unwind-protect (setq value-992 (app
  (let ((value-992 'ert-form-evaluation-aborted-993)) (let (form-descr
  (let* ((fn-990 #'file-exists-p) (args-991 (condition-case err (list 
  #f(lambda () [t] (let* ((fn-990 #'file-exists-p) (args-991 (conditio
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-large-buffer-loadable :docum
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-large-buffer-loadable condition:
Test test-ecc-large-buffer-send-chunked backtrace:
  (let* ((vnew #'(lambda (str &rest _) (let* ((v --ecc-send-string-cal
  #f(lambda () [t] (require 'ecc-large-buffer) (let* ((vnew #'...) (v 
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-large-buffer-send-chunked :d
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-large-buffer-send-chunked condition:
Test test-ecc-template-cache-stats backtrace:
  (ecc-template-cache-get-stats)
  (let ((stats (ecc-template-cache-get-stats))) (let* ((fn-1444 #'=) (
  #f(lambda () [t] (require 'ecc-template-cache) (ecc-template-cache-i
  #f(compiled-function () #<bytecode 0x1e3df9eb259c59d9>)()
  handler-bind-1(#f(compiled-function () #<bytecode 0x1e3df9eb259c59d9
  ert--run-test-internal(#s(ert--test-execution-info :test #s(ert-test
  ert-run-test(#s(ert-test :name test-ecc-template-cache-stats :docume
  ert-run-or-rerun-test(#s(ert--stats :selector t :tests ... :test-map
  ert-run-tests(t #f(compiled-function (event-type &rest event-args) #
  ert-run-tests-batch(t)
  ert-run-tests-batch-and-exit(t)
  eval((ert-run-tests-batch-and-exit t) t)
  command-line-1(("--eval" "(add-to-list 'load-path \"/home/ywatanabe/
  command-line()
  normal-top-level()
Test test-ecc-template-cache-stats condition:
